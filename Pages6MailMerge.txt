(*
Title
Pages6MailMerge.scpt

Author
Frank Tamborello, PhD, CSP
Cogscent, LLC

Description
Applescript script to open a Pages 6 template and find and replace sender and recipient names and addresses for each recipient in a user-selected Apple Contacts group. 

Caveats
1. If you have more than a few dozen recipients, it could take a while to open and process all those documents. 
2. If you haven't quite got your formatting right and need to start the run over again, you can close all Pages windows by uncommenting this code and executing it in a separate Script Editor window:
tell application "Pages"	close every window saving noend tell
3. This script assumes you have a Contacts card set as a "my card" to fill the sender's fields and that you have a nickname (preferred) or first and last names and at least one address for every recipient.

References1. https://iworkautomation.com/pages/examples-mail-merge.html2. http://macosxautomation.com/applescript/iwork/pages/text-item-replace.html*)-- USER SETABLE PROPERTIES-- format is: declaration | variable's name | variable's value, ie text in the document to find for replacement property senderNickNamePlaceholder : "SENDERNICKNAME"property senderFullAddressPlaceholder : "SENDERFULLADDRESS"property recipientNickNamePlaceholder : "RECIPIENTNICKNAME"property recipientFullAddressPlaceholder : "RECIPIENTFULLADDRESS"-- initialize variablesglobal peopleCount, recipientGrouptell application "Contacts"	activate	try				-- CHECK AND RETRIEVE THE SENDER DATA		-- assumes that the sender is the default Contact card, what contacts calls "my card."		set thisPerson to my card		if thisPerson is missing value then error number 10000				-- get the sender’s data		tell thisPerson			set senderNickname to nickname			if senderNickname is missing value then				error number 10001			end if						set the addressCount to the count of addresses			if the addressCount is 0 then				error number 10003			else if the addressCount is 1 then				set senderAddress to the formatted address of the first address			else -- multiple addresses, prompt the user to pick one				set theseAddresses to the formatted address of every address				set senderAddress to ¬					(choose from list theseAddresses with prompt ¬						"Pick the sender address to use:" default items (item 1 of theseAddresses))				if senderAddress is false then error number -128				set senderAddress to senderAddress as string			end if					end tell				-- CHECK AND PROMPT FOR TARGET GROUP		set groupCount to count of groups		if the groupCount is 0 then			error number 10005		else if the groupCount is 1 then			set recipientGroup to group 1			set recipientGroupName to name of recipientGroup		else -- multiple groups, prompt the user to pick one			set theseGroupNames to the name of every group			set recipientGroupName to ¬				(choose from list theseGroupNames with prompt ¬					"Pick the recipient Contacts group:" default items (item 1 of theseGroupNames))			if recipientGroupName is false then error number -128			set recipientGroupName to recipientGroupName as string			set recipientGroup to group recipientGroupName		end if				-- CHECK GROUP FOR PEOPLE		set peopleCount to the count of people of recipientGroup		if the groupCount is 0 then			error number 10006		end if			on error errorMessage number errorNumber		if errorNumber is 10000 then			set errorNumber to "NO DEFAULT CARD"			set errorMessage to ¬				"No person in this Contacts database is set to be the default card or “My Card.” Select a person and choose “Make This My Card” from the Card menu."		else if errorNumber is 10001 then			set selection to my card			set errorNumber to "MISSING SENDER INFO"			set errorMessage to ¬				"The current default card is missing a value for the First Name or Last Name fields."		else if errorNumber is 10003 then			set selection to my card			set errorNumber to "MISSING MAILING ADDRESS"			set errorMessage to ¬				"The current default card is missing a value for the address fields."		else if errorNumber is 10005 then			set errorNumber to "MISSING GROUPS"			set errorMessage to ¬				"There are no groups in the current contact database."		else if errorNumber is 10006 then			set errorNumber to "MISSING PEOPLE"			set errorMessage to ¬				"The chosen Contacts group contains no people."		end if		if errorNumber is not -128 then			display alert (errorNumber as string) message errorMessage		end if		error number -128	end tryend tell-- SWITCH TO PAGES-- Note: The statement to open a document with a template appears to be incompatible with Pages 4 (iWork '09)! I don't know about Pages 5, but it does work with Pages 6. So if you, like me, have both Pages '09 and Pages 6, ensure you point the tell application statement to your fully-specified Pages 6 path and name! Otherwise Script Editor will throw a syntax error. If this is not your full path to your local Pages 6 executable, then you must replace this path with the HFS-formatted path to your local Pages 6 executable.tell application "Applications:Pages.app"	activate	-- BEGIN MERGE	repeat with i from 1 to the peopleCount		tell application "Contacts"			set thisPerson to person i of the recipientGroup			set recipientNickName to nickname of thisPerson			if recipientNickName is missing value then set recipientNickName to first name of thisPerson & " " & last name of thisPerson			set recipientFullAddress to the formatted address of the first address of thisPerson			--			display alert (recipientFullAddress as string)		end tell				-- open a new document with the named template		set thisDocument to (make new document with properties {document template:template "5 x 7 Envelope from Tray"})		tell body text of thisDocument			set recipientFullAddressPlaceholderCount to ¬				the count of (every word where it is recipientFullAddressPlaceholder)		end tell		tell thisDocument			-- replace the placeholders with the person data			set placeholderWordReplacementStringPairings to {{senderNickNamePlaceholder, senderNickname}, {senderFullAddressPlaceholder, senderAddress}, {recipientNickNamePlaceholder, recipientNickName}, {recipientFullAddressPlaceholder, recipientFullAddress}}			-- search and replace in the body text			tell body text				with timeout of 60 seconds -- allow up to 1 minute to process a document					repeat with i from 1 to the count of placeholderWordReplacementStringPairings						copy item i of placeholderWordReplacementStringPairings to ¬							{placeholderWord, replacementString}						my replaceWordWithStringInBodyText(placeholderWord, replacementString)					end repeat				end timeout			end tell						-- search and replace in all the text items (text boxes), useful for recipient name and address layout on an envelope			repeat with i from 1 to the count of placeholderWordReplacementStringPairings				copy item i of placeholderWordReplacementStringPairings to {placeholderWord, replacementString}				set theseTextItems to (every text item whose object text contains placeholderWord)				repeat with i from 1 to the count of theseTextItems					set thisTextItem to item i of theseTextItems					tell thisTextItem						tell its object text							set (every paragraph where it is placeholderWord) to replacementString						end tell					end tell				end repeat			end repeat					end tell	end repeatend tellon replaceWordWithStringInBodyText(searchWord, replacementString)	tell application "Applications:Pages.app"		activate		tell the front document			tell body text				-- start at the end and go to the beginning				repeat with i from the (count of paragraphs) to 1 by -1					tell paragraph i						repeat							try								if exists searchWord then									set (last word where it is searchWord) to replacementString								else									exit repeat								end if							on error errorMessage								exit repeat							end try						end repeat					end tell				end repeat			end tell		end tell		return true	end tellend replaceWordWithStringInBodyTextreturn peopleCount